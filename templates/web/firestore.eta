<%
  const pascalCaseName = it.entityName.charAt(0).toUpperCase() + it.entityName.slice(1);
  const camelCaseName = it.entityName.charAt(0).toLowerCase() + it.entityName.slice(1);
%>
import { Firestore, collection, doc, getDoc, getDocs, setDoc, addDoc, updateDoc, deleteDoc, query, QueryFieldFilterConstraint, QuerySnapshot, DocumentData } from 'firebase/firestore';
import { <%= pascalCaseName %>, <%= camelCaseName %>Ref, Ref } from './scheme';

// Collection reference
export const <%= camelCaseName %>Collection = (db: Firestore, ...params: Parameters<Ref>) => 
  collection(db, <%= camelCaseName %>Ref(...params));

// Document reference
export const <%= camelCaseName %>Doc = (db: Firestore, ...params: Parameters<Ref>) => 
  doc(db, <%= camelCaseName %>Ref(...params));

// Get a document
export const get<%= pascalCaseName %> = async (db: Firestore, ...params: Parameters<Ref>) => {
  const docRef = <%= camelCaseName %>Doc(db, ...params);
  const docSnap = await getDoc(docRef);
  return docSnap.exists() ? docSnap.data() as <%= pascalCaseName %> : null;
};

// Get all documents in a collection
export const getAll<%= pascalCaseName %>s = async (db: Firestore, ...params: Parameters<Ref>) => {
  const collectionRef = <%= camelCaseName %>Collection(db, ...params);
  const querySnapshot = await getDocs(collectionRef);
  return querySnapshot.docs.map(doc => doc.data() as <%= pascalCaseName %>);
};

// Add a new document
export const add<%= pascalCaseName %> = async (db: Firestore, data: <%= pascalCaseName %>, ...params: Parameters<Ref>) => {
  const collectionRef = <%= camelCaseName %>Collection(db, ...params);
  return await addDoc(collectionRef, data);
};

// Set a document
export const set<%= pascalCaseName %> = async (db: Firestore, data: <%= pascalCaseName %>, ...params: Parameters<Ref>) => {
  const docRef = <%= camelCaseName %>Doc(db, ...params);
  await setDoc(docRef, data);
};

// Update a document
export const update<%= pascalCaseName %> = async (db: Firestore, data: Partial<<%= pascalCaseName %>>, ...params: Parameters<Ref>) => {
  const docRef = <%= camelCaseName %>Doc(db, ...params);
  await updateDoc(docRef, data);
};

// Delete a document
export const delete<%= pascalCaseName %> = async (db: Firestore, ...params: Parameters<Ref>) => {
  const docRef = <%= camelCaseName %>Doc(db, ...params);
  await deleteDoc(docRef);
};

export const query<%= pascalCaseName %>s = 
  (db: Firestore, ...refParams: Parameters<Ref>) =>
  async (...queries: QueryFieldFilterConstraint[]) => {
    const collectionRef = <%= camelCaseName %>Collection(db, ...refParams);
    const q = query(collectionRef, ...queries);
    const querySnapshot = await getDocs(q);
    return querySnapshot.docs.map((doc) => doc.data() as <%= pascalCaseName %>);
  };
